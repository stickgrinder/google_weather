<?php
// $Id$

/**
 * @file
 * TODO: Enter file description here.
 */

/**
 * Implementation of hook_menu().
 */
function google_weather_menu() {
  $items['google_weather_block_ajax'] = array(
    'page callback' => 'google_weather_block_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_block().
 */
function google_weather_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {

    case 'list':
      $blocks[0]['info'] = t('Google Weather');
      return $blocks;

    case 'configure':
      // OPTIONAL: Enter form elements to add to block configuration screen, if required.
      if ($delta == 0 && user_access('administer module')) {

        $form['google_weather_default_location'] = array(
          '#type' => 'textfield',
          '#title' => t('Default location'),
          '#default_value' => variable_get("google_weather_default_location", 'Roma'),
        );
        $form['google_weather_default_degree_type'] = array(
          '#type' => 'radios',
          '#title' => t('Default degree type'),
          '#default_value' => variable_get("google_weather_default_degree_type", 'C'),
          '#options' => array('C' => 'Celsius', 'F' => 'Farenheit'),
        );

      }
      return $form;

    case 'save':
      // OPTIONAL: Add code to trigger when block configuration is saved, if required.
      if ($delta == 0) {
        foreach ($edit as $label => $value) {
          variable_set($label, $value);
        }
      }
      break;

    case 'view':
      if ($delta == 0) {

        // try to read location from cookie/session, or take the default one
        $location = ''; //stubbing

        // derive weather from location
        $weather = _google_weather_get_weather($location);

        $block['subject'] = t('Google Weather');
        $block['content'] = theme('google_weather_block', $weather);
      }
      // OPTIONAL: Enter additional cases for each additional block, if defined.

      return $block;
  }
}

/**
 * Response for the AJAX request
 */
function google_weather_block_ajax() {
  $request = (object) $_POST;

  // try to read location from cookie/session, or take the default one
  $location = ''; //stubbing

  // derive weather from location
  $weather = _google_weather_get_weather($location);

  if (!isset($weather->error)) {
    // save new location preference

  }

  print theme('google_weather_block', $weather);
}

/**
 * Implementation of hook_theme().
 */
function google_weather_theme($existing, $type, $theme, $path) {
  return array(
    'google_weather_block' => array(
      'arguments' => array('text' => 'No text'),
      'template' => 'google-weather-block',
    ),
  );
}


/**
* Implementation of $modulename_preprocess_$hook().
*/
function google_weather_preprocess_google_weather_block(&$variables) {
  $variables['url'] = 'http://www.google.com/ig/api';
  $variables['weather_location'] = variable_get('google_weather_default_location', 'Roma');
}

/**
 * Helper to query Google about weather in given location
 * and build a handy weather object
 */
function _google_weather_get_weather($location = NULL) {
  $weather = new stdClass;

  // FRA:
  // read weather location by direct call to simple_xml_load_file() so that
  // $xml object is available

  // if location was wrong or some other error occurred:
  if (isset('xml->problem_cause') || !isset('xml->forecast_information')) { /* FRA: put correct tests here*/
    $weather->error = t('Data not available for this location');
    return $weather;
  }

  // else, populate $weather with right data
  // FRA: you know how data are organized, so substitute '' with right vars! :P

  $weather->icon = _google_weather_clean_icon('');
                      // (google address and .gif extension should be stripped. I'll leave actual
                      // position inside the template file so that it could be overridden at will
                      // by different themers (nice, uh?! ;) ). Function _google_weather_clean_icon()
                      // is already in this file! Take a look below.
  $weather->current_temp_f = '';
  $weather->current_temp_c = '';
  $weather->current_condition = '';
  $weather->current_humidity = '';
  $weather->current_wind = '';

  // foreach forcast block create new forecast element and
  // push it at the bottom of a pile:
  foreach /*or while()*/ (/*put elements here*/) {

    $forecast = new stdClass;

    $forecast->icon = _google_weather_clean_icon('');
    $forecast->day_of_week = '';
    $forecast->condition = '';

    // if $xml->conditions->units report SI, convert data to F and vice-versa.

    if (/* units is SI*/) {
      $forecast->low_c = '';
      $forecast->high_c = ''
      $forecast->low_f = _google_weather_c2f('');
      $forecast->high_f = _google_weather_c2f('');
    } else {
      $forecast->low_c = _google_weather_f2c('');
      $forecast->high_c = _google_weather_f2c('');
      $forecast->low_f = '';
      $forecast->high_f = '';
    }

    $weather->forecast[] = $forecast;
  }

  // return built object
  return $weather;
}

/**
 * Helper to extract icon name so that we can use our own instead
 * of google standard ones. (should become an option in future versions)
 */
function _google_weather_clean_icon($icon = '') {

  if (strpos($icon,"/ig/images/weather/") !== false) {
      $icon = str_replace("/ig/images/weather/", "" , $icon);
  }

  // convert to png
  $icon = str_replace('.gif', '.png', $icon);
  // exclude special languages prefixes from icon name (add them to the array if necessary)
  $icon = str_replace(array('jp_'), '', $icon);

  return $icon;
}

/**
 * Helpers to convert temperature values: in forecasts temperatures are not
 * returned in both units by Google, so we need to do the maths.
 */
function _google_weather_c2f($temp) {
  return intval( (9/5) * ( intval($temp) + 32 ));
}

function _google_weather_f2c('') {
  return intval( (5/9) * ( intval($temp) - 32 ));
}
