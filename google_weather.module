<?php
// $Id$

/**
 * @file
 * TODO: Enter file description here.
 */

/**
 * Implementation of hook_menu().
 */
function google_weather_menu() {
  $items['google_weather_block_ajax'] = array(
    'page callback' => 'google_weather_block_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_block().
 */
function google_weather_block($op = 'list', $delta = 0, $edit = array()) {

  switch ($op) {

    case 'list':
      $blocks[0]['info'] = t('Google Weather');
      return $blocks;

    case 'configure':
      // OPTIONAL: Enter form elements to add to block configuration screen, if required.
      if ($delta == 0 && user_access('administer module')) {

        $form['google_weather_default_location'] = array(
          '#type' => 'textfield',
          '#title' => t('Default location'),
          '#default_value' => variable_get("google_weather_default_location", 'Roma'),
        );
        $form['google_weather_default_degree_type'] = array(
          '#type' => 'radios',
          '#title' => t('Default degree type'),
          '#default_value' => variable_get("google_weather_default_degree_type", 'C'),
          '#options' => array('C' => 'Celsius', 'F' => 'Farenheit'),
        );

      }
      return $form;

    case 'save':
      // OPTIONAL: Add code to trigger when block configuration is saved, if required.
      if ($delta == 0) {
        foreach ($edit as $label => $value) {
          variable_set($label, $value);
        }
      }
      break;

    case 'view':
      if ($delta == 0) {

        $google_weather_user_location = $_COOKIES['google_weather_user_location'] ? $_COOKIES['google_weather_user_location'] : NULL;

        // try to read location from cookie/session, or take the default one
        if (isset($google_weather_user_location) && ($google_weather_user_location != '')) {
          $location = $google_weather_user_location;
        } else {
          $location = variable_get("google_weather_default_location",'Roma');
        }

        // derive weather from location
        $weather = _google_weather_get_weather($location);

  $path = drupal_get_path('module', 'google_weather');
        drupal_add_css($path."/google_weather.css", 'module');
        drupal_add_js($path."/google_weather.js");


        $block['subject'] = t('Google Weather');
        $block['content'] = theme('google_weather_block', $weather);
      }
      // OPTIONAL: Enter additional cases for each additional block, if defined.

      return $block;
  }
}

/**
 * Response for the AJAX request
 */
function google_weather_block_ajax() {

  $request = (object) $_POST;

  // read the $user object to discover if a location has already been selected
  $google_weather_user_location = $_COOKIES['google_weather_user_location'] ? $_COOKIES['google_weather_user_location'] : NULL;

  // location has to be defined in $_POST. If not, degrade gracefully
  // on the cookie. If no cookie is defined, get the default location.
  if (isset($request->google_weather_location) && ($request->google_weather_location != '')) {
    $location = $request->google_weather_location;
  } else if (isset($google_weather_user_location) && ($google_weather_user_location != '')) {
    $location = $google_weather_user_location;
  } else {
    $location = variable_get("google_weather_default_location",'Roma');
  }

  // derive weather from location
  $weather = _google_weather_get_weather($location);

  if (!isset($weather->problem_cause)) {
    // save a cookie with user preference
    setcookie('google_weather_user_location', $google_weather_user_location, time()+60*60*24*30); // the preference will last for 30 days.
  }

  print theme('google_weather_block', $weather);
}

/**
 * Implementation of hook_theme().
 */
function google_weather_theme($existing, $type, $theme, $path) {
  return array(
    'google_weather_block' => array(
      'arguments' => array('weather' => FALSE),
      'template' => 'google-weather-block',
    ),
  );
}


/**
* Implementation of $modulename_preprocess_$hook().
*/
function google_weather_preprocess_google_weather_block(&$variables) {
  //$variables['url'] = 'http://www.google.com/ig/api';
  $variables['url_ajax'] = 'google_weather_block_ajax';
  $variables['weather_location'] = variable_get('google_weather_default_location', 'Roma');
  $variables['icon_url'] = drupal_get_path('module', 'google_weather')."/images/";
  $variables['degree_type'] = variable_get('google_weather_default_degree_type', 'C');
}

/**
 * Helper to query Google about weather in given location
 * and build a handy weather object
 */
function _google_weather_get_weather($location = NULL) {
  $weather = new stdClass;
  global $language;

  // FRA: -M
  // read weather location by direct call to simple_xml_load_file() so that
  // $xml object is available
  $request_url = 'http://www.google.com/ig/api?weather='.urlencode($location).'&hl='.$language->language;
  $ch = curl_init();
  curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt ($ch, CURLOPT_URL, $request_url);
  curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER['HTTP_USER_AGENT']);
  curl_setopt ($ch, CURLOPT_TIMEOUT, 60);
  // read XML
  $xml = simplexml_load_string(curl_exec ($ch)) or  $weather->error = t('Google Weather feed not loading');
  curl_close ($ch);

  // if location was wrong or some other error occurred:
  if ($xml->weather->problem_cause['data']) {
    $weather->error = t('Data not available for this location');
    return $weather;
  }else{

  // else, populate $weather with right data
    $weather->icon = _google_weather_clean_icon($xml->weather->current_conditions->icon[data]);
                      // (google address and .gif extension should be stripped. I'll leave actual
                      // position inside the template file so that it could be overridden at will
                      // by different themers (nice, uh?! ;) ). Function _google_weather_clean_icon()
                      // is already in this file! Take a look below.
    $weather->current_temp_f = $xml->weather->current_conditions->temp_f[data];
    $weather->current_temp_c = $xml->weather->current_conditions->temp_c[data];
    $weather->current_condition = $xml->weather->current_conditions->condition[data];
    $weather->current_humidity = $xml->weather->current_conditions->humidity[data];
    $weather->current_wind = $xml->weather->current_conditions->wind_condition[data];
    $weather->unit_system = $xml->weather->forecast_information->unit_system[data];

  // foreach forcast block create new forecast element and
  // push it at the bottom of a pile:
    for ($i = 0; $i <= 3; $i++){
  //I used a FOR cicle because there are only 4 forecast_contidions

      $forecast = new stdClass;

      $forecast->icon = _google_weather_clean_icon($xml->weather->forecast_conditions->$i->icon[data]);
      $forecast->day_of_week = $xml->weather->forecast_conditions->$i->day_of_week[data];
      $forecast->condition = $xml->weather->forecast_conditions->$i->condition[data];

      // if $xml->conditions->units report SI, convert data to F and vice-versa.

      if ($weather->unit_system=='SI') {
        $forecast->low_c = $xml->weather->forecast_conditions->$i->low[data];
        $forecast->high_c = $xml->weather->forecast_conditions->$i->high[data];
        $forecast->low_f = _google_weather_c2f($xml->weather->forecast_conditions->$i->low[data]);
        $forecast->high_f = _google_weather_c2f($xml->weather->forecast_conditions->$i->high[data]);
      } else {
        $forecast->low_c = _google_weather_f2c($xml->weather->forecast_conditions->$i->low[data]);
        $forecast->high_c = _google_weather_f2c($xml->weather->forecast_conditions->$i->high[data]);
        $forecast->low_f = $xml->weather->forecast_conditions->$i->low[data];
        $forecast->high_f = $xml->weather->forecast_conditions->$i->high[data];
      }

      $weather->forecast[] = $forecast;
    }

  // return built object
    return $weather;
  }
}

/**
 * Helper to extract icon name so that we can use our own instead
 * of google standard ones. (should become an option in future versions)
 */
function _google_weather_clean_icon($icon = '') {

  if (strpos($icon,"/ig/images/weather/") !== false) {
      $icon = str_replace("/ig/images/weather/", "" , $icon);
  }

  // convert to png
  $icon = str_replace('.gif', '.png', $icon);
  // exclude special languages prefixes from icon name (add them to the array if necessary)
  $icon = str_replace(array('jp_'), '', $icon);

  return $icon;
}

/**
 * Helpers to convert temperature values: in forecasts temperatures are not
 * returned in both units by Google, so we need to do the maths.
 */
function _google_weather_c2f($temp) {
  return intval( (9/5) * ( intval($temp) + 32 ));
}

function _google_weather_f2c($temp) {
  return intval( (5/9) * ( intval($temp) - 32 ));
}
